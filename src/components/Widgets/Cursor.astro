---
import { twMerge } from 'tailwind-merge';
import { Icon } from 'astro-icon/components';

import { Color, Jury } from '#/libs/types';

interface Props {
  class?: string;
  follower?: boolean;
  side?: 'left' | 'right';
  color: Color;
  name: Jury;
}

const {
  name,
  follower = false,
  color = Color.blue,
  class: className = '',
  side = 'left',
} = Astro.props;
---

<div
  x-data="cursor"
  x-bind:data-right="isRightSide || $el.dataset.side === 'right' ? 'true' : null"
  x-bind:data-following="!!$el.dataset.follower && $store.global.cursor === $el.dataset.name ? 'true' : null"
  data-side={side ?? null}
  data-follower={follower ? 'true' : null}
  data-name={name}
  class={twMerge(
    'z-50 group gap pointer-events-none relative flex flex-col data-[right]:items-end flex-none h-fit w-fit',
    Color.blue === color && 'text-blue-mid',
    Color.pink === color && 'text-pink-mid',
    Color.green === color && 'text-green-mid',
    Color.mustard === color && 'text-mustard-mid',
    Color.purple === color && 'text-purple-mid',
    Color.orange === color && 'text-orange-mid',
    className
  )}
>
  <Icon
    name="cursor"
    class="group-data-[right]:scale-x-[1] scale-x-[-1] transition-all"
  />
  <div
    class={twMerge(
      'relative -mt-5 -ml-1 rounded-full px-2 py-1 border-2 rounded-tl-none group-data-[right]:rounded-tr-none group-data-[right]:rounded-tl-full text-xs font-medium text-white top-4 left-5 group-data-[right]:left-auto group-data-[right]:right-5',
      color === Color.blue && 'border-blue-dark bg-blue-mid',
      color === Color.pink && 'border-pink-dark bg-pink-mid',
      color === Color.green && 'border-green-dark bg-green-mid',
      color === Color.mustard && 'border-mustard-dark bg-mustard-mid',
      color === Color.purple && 'border-purple-dark bg-purple-mid',
      color === Color.orange && 'border-orange-dark bg-orange-mid'
    )}
  >
    @{name}
  </div>
</div>
<script>
  import gsap from 'gsap';
  import Alpine from 'alpinejs';
  import type { AlpineStore } from '#/libs/types';

  Alpine.data('cursor', () => ({
    isRightSide: false,

    init() {
      if (this.$root.dataset.follower) {
        window.addEventListener('mousemove', (e) => {
          const store = this.$store.global as AlpineStore;
          if (store?.cursor !== this.$root.dataset.name) return;

          this.$root.dataset.side = undefined;
          this.isRightSide = e.clientX > window.innerWidth * 0.5;

          gsap.set(this.$root, { xPercent: this.isRightSide ? -100 : 0 });

          gsap.to(this.$root, {
            duration: 0.1,
            x: e.clientX,
            y: e.clientY,
            position: 'fixed',
            top: 0,
            left: 0,
            scale: store.hovering ? 1.1 : 1,
            transformOrigin: 'top right',
            ease: 'power2.out',
          });
        });
      }
    },
  }));
</script>
